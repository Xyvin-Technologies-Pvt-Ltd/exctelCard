name: Deploy Backend Directly to VM

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: exctelcard-backend
      IMAGE_TAG: latest
      CONTAINER_NAME: exctelCard-backend
      PORT: 5001
      ENV_FILE_PATH: /home/xyvin-dev/extelcard/.env/.env.production

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v3

      - name: üê≥ Build Docker image
        run: |
          echo "Building image..."
          docker build -t ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ./backend

      - name: üì¶ Save Docker image to tar file
        run: |
          echo "Saving image to backend-image.tar..."
          docker save ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -o backend-image.tar

      - name: üöö Copy image tar to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_KEY }}
          source: "backend-image.tar"
          target: "/home/${{ secrets.AZURE_VM_USER }}/backend-image.tar"

      - name: üöÄ Load image & deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AZURE_VM_HOST }}
          username: ${{ secrets.AZURE_VM_USER }}
          key: ${{ secrets.AZURE_VM_KEY }}
          script: |
            set -e

            echo "üì¶ Loading image..."
            docker load -i ~/backend-image.tar

            echo "üßπ Stopping old container..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            echo "‚úÖ Checking .env file..."
            if [ ! -f "${{ env.ENV_FILE_PATH }}" ]; then
              echo "‚ùå .env.production not found at ${{ env.ENV_FILE_PATH }}"
              exit 1
            fi

            echo "üöÄ Running new container..."
            sudo docker run -d \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              --restart always \
              --name ${{ env.CONTAINER_NAME }} \
              --env-file ${{ env.ENV_FILE_PATH }} \
              ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

            echo "üîç Verifying..."
            sudo docker ps | grep ${{ env.CONTAINER_NAME }}
            sudo docker logs ${{ env.CONTAINER_NAME }} --tail 10

            echo "‚úÖ Deployment done!"
